{"name":"Yalv","tagline":"Yet Another Log Viewer","body":"# YALV \r\n\r\nYet Another Log Viewer\r\n\r\nYALV helps you avoid the pain of manually tracing requests through logs. It requires an entering and exiting log entry based on which it calculates the time required for execution and matches against the server metrics like server memory used, memory free, load average.\r\n\r\n\r\n## Getting Started\r\n\r\n- Clone project\r\n\r\n- Install dependencies\r\n\r\n```\r\nnpm install\r\n```\r\n\r\nYALV has two main components on the server side. A udp server listens for logs being sent and stores it in mongodb. A bash script tails logs and sends it to the udp server.\r\n\r\nDeploy the following on each server thats generating logs.\r\n\r\n- Start the udp server on all servers. This listens for messages on port 5201\r\n\r\n```\r\nnode server/udp.js\r\n```\r\n\r\n- Start live monitoring script\r\n```\r\n./monitor/tail.sh\r\n\r\nor\r\n\r\n./monitor/tail.sh /var/log/app.log pid 5201\r\n```\r\nIn the first scenario it looks for app.log in the current working directory. It tails app.log and if it finds a string with pid in the log file it pushes to the udp server on port 5201.\r\n\r\nThe second option lets you give the location of the log file, custom string to look for in each log entry and the udp port.\r\n\r\nThis reads each line and matches the entry/exit for a particular request. It also adds server snapshot at that moment in time, giving you the corresponding server load, RAM used, RAM free.\r\n\r\n- Load historical logs\r\n```\r\n./monitor/loadLog.sh\r\n```\r\nIt takes the same arguments as tail.sh. One disadvantage of using loading historical logs is you dont get server memory/load snapshot at the time of log generation. The memory/server load snapshots would be the server information at the time of file reading.\r\n\r\n- Mongodb\r\n\r\n  The service uses mongodb for the backend.\r\n  Mongodb location is configured in db/db.js. Change url variable to your location of mongodb instance\r\n  If you would like to replace mongodb with another db, replace the functions in db/db.js with the equivalent for your db.\r\n\r\n## Supported Platforms\r\n- Linux/Mac\r\n- Git bash on windows should work fine. (Load average will be [0,0,0] as that concept doesn't exist on windows)\r\n\r\n## Generating logs\r\n- Logs are generally generated by your application. However for testing purposes, you can generate dummy logs.\r\n```\r\nnode jobs.js\r\n```\r\nThis will generate logs in app.log in your current working directory. It uses bunyan and node cron jobs to generate logs.\r\nEach log entry will look like \r\n\r\n```\r\n{\"name\":\"app\",\"hostname\":\"L-SFM4142Q32\",\"pid\":8912,\"level\":30,\"type\":\"entering\",\"request\":\"2df4b3e3093da57548e0\",\"api\":\"service\",\"func\":\"calculate\",\"msg\":\"\",\"time\":\"2015-09-04T18:28:00.917Z\",\"v\":0}\r\n\r\n...\r\n\r\n{\"name\":\"app\",\"hostname\":\"L-SFM4142Q32\",\"pid\":8912,\"level\":30,\"type\":\"exiting\",\"request\":\"2df4b3e3093da57548e0\",\"api\":\"service\",\"func\":\"calculate\",\"msg\":\"\",\"time\":\"2015-09-04T18:28:01.379Z\",\"v\":0}\r\n```\r\n\r\nThe service looks for type=entering,type=exiting and respective timestamps to match requests on same request,web server and func values.\r\n\r\nIf your  application doesn't generate json logs, you can modify either bash script or udp server to change your log string to json formatted string in the above format.\r\n\r\nLooped calls to a function are all captured. Individual looped request are shown under all requests while the averaged out response times are shown in the other graphs.\r\n\r\n## UI\r\n\r\nTo check out the graphical representation of your logs check out [YALV-UI](https://github.com/marsinvasion/yalv-ui)\r\n\r\n## Dependencies\r\n\r\n- [bunyan](https://github.com/trentm/node-bunyan): a JSON logging library for node.js services\r\n- [node-cron-jobs](https://github.com/marsinvasion/node-cron-jobs): Schedules cron like jobs\r\n- [express](https://github.com/strongloop/express): Fast, unopinionated, minimalist web framework\r\n- [express-handlebars](https://github.com/ericf/express-handlebars): A Handlebars view engine for Express which doesn&#39;t suck.\r\n- [mongodb](https://github.com/mongodb/node-mongodb-native): A node.js driver for MongoDB\r\n\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\nAnoop Kulkarni (http://anoopkulkarni.com, https://tweetcareers.com,  https://newsp.in)\r\n","google":"UA-68122912-1","note":"Don't delete this file! It's used internally to help with page regeneration."}